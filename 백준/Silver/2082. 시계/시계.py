'''
칸의 구별은 띄워쓰기로 친다
4칸: 0~2, 4~6, 8~11, 13~15 v

함수 제작: 시간 판별
 - 기존의 시간 데이터 값을 매개변수로  v
 - 현재 들어온 칸의 배열과 각 항 비교  v
    * 기존 시간 데이터를 입력받은 데이터에 비교 -> 없으면 그 숫자는 제외
 - 가능한 숫자중 가장 작은 것으로
'''

time = [[['#', '#', '#'], ['#', '.', '#'], ['#', '.', '#'], ['#', '.', '#'], ['#', '#', '#']],  # 0
        [['.', '.', '#'], ['.', '.', '#'], ['.', '.', '#'], ['.', '.', '#'], ['.', '.', '#']],  # 1
        [['#', '#', '#'], ['.', '.', '#'], ['#', '#', '#'], ['#', '.', '.'], ['#', '#', '#']],  # 2
        [['#', '#', '#'], ['.', '.', '#'], ['#', '#', '#'], ['.', '.', '#'], ['#', '#', '#']],  # 3
        [['#', '.', '#'], ['#', '.', '#'], ['#', '#', '#'], ['.', '.', '#'], ['.', '.', '#']],  # 4
        [['#', '#', '#'], ['#', '.', '.'], ['#', '#', '#'], ['.', '.', '#'], ['#', '#', '#']],  # 5
        [['#', '#', '#'], ['#', '.', '.'], ['#', '#', '#'], ['#', '.', '#'], ['#', '#', '#']],  # 6
        [['#', '#', '#'], ['.', '.', '#'], ['.', '.', '#'], ['.', '.', '#'], ['.', '.', '#']],  # 7
        [['#', '#', '#'], ['#', '.', '#'], ['#', '#', '#'], ['#', '.', '#'], ['#', '#', '#']],  # 8
        [['#', '#', '#'], ['#', '.', '#'], ['#', '#', '#'], ['.', '.', '#'], ['#', '#', '#']]]  # 9

# now에는 있는데 time에는 없으면 false
def wtisit(now):  # now: 한칸의 숫자
    numlist = []
    for num in range(10):
        flag = True
        for i in range(5):
            for j in range(3):
                if time[num][i][j] == "." and now[i][j] == "#":
                    flag = False
        if flag:
            numlist.append(num)
    return min(numlist)




board = []
nowtime = []
result = []
for _ in range(5):
    board.append(input().split())

for i in range(4):
    temp = []
    for j in range(5):
        temp.append(list(board[j][i]))
    nowtime.append(temp)

for i in nowtime:
    result.append(wtisit(i))

result.insert(2, ':')
for i in result:
    print(i, end="")
